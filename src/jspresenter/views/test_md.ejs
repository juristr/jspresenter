# Testing

## TOC

- [Why testing?](http://blog.js-development.com/2010/07/testing-newbies-some-thoughts-about.html)
- Test Case Structure
	- setup
	- teardown
	- test execution
		- arrange environment
		- act on the test logic
		- assert the result
- Family of Test Doubles
- What makes testing **hard**?
	- strong coupling 
		- new SomeClass() ([example](http://blog.js-development.com/2010/12/smelly-code-direct-object-instantiation.html)
		- network dependencies ([example](http://blog.js-development.com/2011/06/smellycode-classical-example-of-non.html)
		- DB connections/interactions
	- Static Classes
- Do's and Don'ts
	- Do's
		- [keep it simple, stupid](http://blog.js-development.com/2011/07/write-minimum-necessary-code-in-your.html)
		- [test a single responsibily](http://blog.js-development.com/2012/07/testing-and-single-responsibility.html)
	- Don'ts
		- coupling between tests cases
		- shared test setups (keep minimum)
		- [Eager tests](http://blog.js-development.com/2010/09/smelly-code-eager-test.html)
- How to apply when developing software?
	- TDD
	- Test-Driven Bugfixing (write a failing test)
- Practical application
	- Testing in JavaScript
		- Mocking
			- Model functions
			- Ajax calls
	- Testing in C#
		- [Use var to have more maintainable tests](http://blog.js-development.com/2011/11/use-var-keyword-to-have-more.html)
		- Testing ASP.net MVC Controllers
		- Mocking DB/network calls
		- [Example of Non-testable code](http://blog.js-development.com/2011/06/smellycode-classical-example-of-non.html)
	- Testing in Java

## Why Testing?

## The Family of Test Doubles

[http://martinfowler.com/articles/mocksArentStubs.html](http://martinfowler.com/articles/mocksArentStubs.html)

### Dummy

### Fake

### Stubs

### Mocks

## Testing in JavaScript (with JavaScriptMVC)

### Libraries
Some of the most popular testing frameworks:

- QUnit
- Jasmine

Utilities:

- Sinon.js (for creating mocks, stubs, spies...)
- jsTestDriver (concurrently executing tests in multiple browsers)

### QUnit - A simple test case
The following shows a very simple (not real-world) test case in QUnit.

	module("Hello World")

	test("Should return hello world", function(){
		var expected = "Hello, world!";
		var result = "Hello, world!";

		equals(result, expected);
	});

## Testing in C# 
_(next up)_

## Testing in Java
_(next up)_